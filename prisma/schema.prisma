// Prisma Client Generator
generator client {
  provider = "prisma-client-js"
}

// MongoDB Datasource
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


enum UserRole {
  CUSTOMER
  CAR_PROVIDER
  TOUR_GUIDE
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum AccommodationType {
  HOTEL
  APARTMENT
  VILLA
  LODGE
  HOSTEL
  RESORT
}



model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  password    String
  name        String
  role        UserRole @default(CUSTOMER)
  phone       String?
  avatar      String?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // References (manual relations in MongoDB)
  accommodations  String[]   @db.ObjectId
  cars            String[]   @db.ObjectId
  tourGuideId     String?    @db.ObjectId
  bookings        String[]   @db.ObjectId
  reviews         String[]   @db.ObjectId


}

model Accommodation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  type          AccommodationType
  address       String
  city          String
  country       String
  latitude      Float?
  longitude     Float?
  pricePerNight Float
  maxGuests     Int
  bedrooms      Int
  bathrooms     Int
  images        String[]
  amenities     String[]
  rating        Float   @default(0)
  reviewCount   Int     @default(0)
  available     Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  ownerId       String   @db.ObjectId
  bookingIds    String[] @db.ObjectId
  reviewIds     String[] @db.ObjectId
  unavailableIds String[] @db.ObjectId

  @@index([city, country])
  @@index([type])
  @@index([pricePerNight])
}

model Car {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  brand           String
  model           String
  year            Int
  type            String
  description     String
  pricePerDay     Float
  seats           Int
  transmission    String
  fuelType        String
  images          String[]
  features        String[]
  location        String
  city            String
  country         String
  latitude        Float?
  longitude       Float?
  rating          Float   @default(0)
  reviewCount     Int     @default(0)
  available       Boolean @default(true)
  licensePlate    String  @unique
  insuranceExpiry DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  providerId      String   @db.ObjectId
  bookingIds      String[] @db.ObjectId
  reviewIds       String[] @db.ObjectId
  unavailableIds  String[] @db.ObjectId

  @@index([city, country])
  @@index([type])
  @@index([pricePerDay])
}

model TourGuide {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  bio            String
  languages      String[]
  specialties    String[]
  experience     Int
  pricePerHour   Float
  city           String
  country        String
  rating         Float   @default(0)
  reviewCount    Int     @default(0)
  toursCompleted Int     @default(0)
  certifications String[]
  available      Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId         String   @unique @db.ObjectId
  bookingIds     String[] @db.ObjectId
  reviewIds      String[] @db.ObjectId
  availabilityIds String[] @db.ObjectId

  @@index([city, country])
}

model Booking {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  bookingNumber String        @unique
  checkIn       DateTime
  checkOut      DateTime
  guests        Int
  totalPrice    Float
  status        BookingStatus @default(PENDING)
  specialRequests String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId        String   @db.ObjectId
  accommodationId String? @db.ObjectId
  carId         String? @db.ObjectId
  tourGuideId   String? @db.ObjectId
  paymentId     String? @db.ObjectId
  reviewId      String? @db.ObjectId

  @@index([userId])
  @@index([status])
  @@index([checkIn, checkOut])
}

model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  currency      String   @default("USD")
  method        String
  transactionId String   @unique
  status        String
  paidAt        DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  bookingId     String   @unique @db.ObjectId

  @@index([status])
}

model Review {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  rating        Int
  comment       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId        String   @db.ObjectId
  bookingId     String   @unique @db.ObjectId
  accommodationId String? @db.ObjectId
  carId         String? @db.ObjectId
  tourGuideId   String? @db.ObjectId

  @@index([userId])
  @@index([rating])
}

model UnavailableDate {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  date          DateTime
  reason        String?
  createdAt     DateTime @default(now())

  accommodationId String? @db.ObjectId
  carId           String? @db.ObjectId

  @@index([date])
}

model GuideAvailability {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  dayOfWeek   Int
  startTime   String
  endTime     String
  createdAt   DateTime @default(now())

  tourGuideId String @db.ObjectId

  @@index([tourGuideId])
}

model Wishlist {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  accommodationId String? @db.ObjectId
  carId         String? @db.ObjectId
  tourGuideId   String? @db.ObjectId
  createdAt     DateTime @default(now())

  @@unique([userId, accommodationId])
  @@unique([userId, carId])
  @@unique([userId, tourGuideId])
}
