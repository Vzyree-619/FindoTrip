// Prisma Client Generator
generator client {
  provider = "prisma-client-js"
}

// MongoDB Datasource
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enhanced Enums for Multi-Service Platform
enum UserRole {
  CUSTOMER
  PROPERTY_OWNER
  VEHICLE_OWNER
  TOUR_GUIDE
  SUPER_ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
  NO_SHOW
}

enum PropertyType {
  HOTEL
  APARTMENT
  VILLA
  LODGE
  HOSTEL
  RESORT
  GUESTHOUSE
  BOUTIQUE_HOTEL
  SERVICED_APARTMENT
}

enum VehicleType {
  CAR
  SUV
  VAN
  BUS
  MOTORCYCLE
  BOAT
  YACHT
  BICYCLE
  RICKSHAW
  LUXURY_CAR
}

enum TourType {
  CITY_TOUR
  ADVENTURE
  CULTURAL
  FOOD_TOUR
  NATURE
  HISTORICAL
  RELIGIOUS
  PHOTOGRAPHY
  SHOPPING
  NIGHTLIFE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
  REQUIRES_CHANGES
}

enum ServiceType {
  PROPERTY
  VEHICLE
  TOUR
  PROFILE_UPDATE
  PRICING_CHANGE
  NEW_LISTING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  MOBILE_WALLET
  CASH
  CRYPTO
}

enum DocumentType {
  NATIONAL_ID
  PASSPORT
  DRIVING_LICENSE
  BUSINESS_LICENSE
  TAX_CERTIFICATE
  INSURANCE_DOCUMENT
  VEHICLE_REGISTRATION
  TOUR_GUIDE_LICENSE
}

enum NotificationType {
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  REVIEW_RECEIVED
  MESSAGE_RECEIVED
  LISTING_APPROVED
  LISTING_REJECTED
  PROFILE_VERIFIED
  SYSTEM_ANNOUNCEMENT
  SUPPORT_TICKET_CREATED
  SUPPORT_TICKET_UPDATED
  SUPPORT_MESSAGE_RECEIVED
  SUPPORT_TICKET_RESOLVED
}

enum SupportTicketStatus {
  NEW
  IN_PROGRESS
  WAITING
  RESOLVED
  CLOSED
  ESCALATED
}

enum SupportTicketPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum SupportTicketCategory {
  ACCOUNT_ISSUES
  APPROVAL_QUESTIONS
  TECHNICAL_SUPPORT
  PAYMENT_ISSUES
  POLICY_QUESTIONS
  FEATURE_REQUEST
  BUG_REPORT
  OTHER
}

// Legacy MessageType enum removed; using comprehensive chat MessageType below

enum CommissionStatus {
  PENDING
  CALCULATED
  PAID
  DISPUTED
}

// ========================================
// CORE USER SYSTEM WITH REAL RELATIONSHIPS
// ========================================

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  password    String
  name        String
  role        UserRole @default(CUSTOMER)
  phone       String?
  avatar      String?
  verified    Boolean  @default(false)
  active      Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Profile completion tracking
  profileCompleted Boolean @default(false)
  onboardingStep   Int     @default(0)

  // Notification preferences
  emailNotifications    Boolean @default(true)
  smsNotifications     Boolean @default(false)
  pushNotifications    Boolean @default(true)

  // Security
  twoFactorEnabled     Boolean @default(false)
  twoFactorSecret      String?
  loginAttempts        Int     @default(0)
  lockedUntil          DateTime?

  // ========================================
  // REAL RELATIONSHIPS - Role-based profiles
  // ========================================
  customerProfile    CustomerProfile?
  propertyOwner      PropertyOwner?
  vehicleOwner       VehicleOwner?
  tourGuide          TourGuide?
  superAdmin         SuperAdmin?

  // ========================================
  // INTERCONNECTED FEATURES - All services
  // ========================================
  
  // Bookings across all service types
  propertyBookings   PropertyBooking[]
  vehicleBookings    VehicleBooking[]
  tourBookings       TourBooking[]

  // Reviews for all services
  reviews            Review[]

  // Favorites system for all services
  wishlists          Wishlist[]

  // Payments for all bookings
  payments           Payment[]

  // Notifications for all activities
  notifications      Notification[]

  // Legacy direct messages removed
  // sentMessages       Message[] @relation("MessageSender")
  // receivedMessages   Message[] @relation("MessageReceiver")

  // Documents for verification
  documents          Document[]

  // Analytics tracking
  analytics          Analytics[]

  // Commission tracking (for service providers)
  commissions        Commission[]

  // Payout tracking (for service providers)
  payouts            Payout[]

  // Password reset tokens
  passwordResetTokens PasswordResetToken[]

  // Computed counters (maintained by application logic)
  totalBookings     Int @default(0)

  // ========================================
  // SUPPORT SYSTEM RELATIONSHIPS
  // ========================================
  
  // Support tickets created by provider
  supportTicketsCreated SupportTicket[] @relation("SupportTicketProvider")
  
  // Support tickets assigned to admin
  supportTicketsAssigned SupportTicket[] @relation("SupportTicketAssigned")
  
  // Support messages sent
  supportMessagesSent SupportMessage[] @relation("SupportMessageSender")
  
  // Response templates created
  responseTemplatesCreated ResponseTemplate[] @relation("TemplateCreator")
  
  // Broadcasts created
  broadcastsCreated SupportBroadcast[] @relation("BroadcastCreator")
  
  // ========================================
  // CHAT ANALYTICS RELATIONSHIPS
  // ========================================
  
  // Chat analytics for providers
  // chatAnalytics ChatAnalytics[]
  
  // Performance scores
  performanceScores PerformanceScore[] @relation("PerformanceScoreProvider")
  
  // Chat messages sent (legacy)
  // chatMessagesSent ChatMessage[] @relation("ChatMessageSender")
  
  // Conversations (comprehensive model uses participants array; drop legacy fields)
  // conversationsAsCustomer Conversation[]
  // conversationsAsProvider Conversation[]
  
  // ========================================
  // COMPREHENSIVE CHAT SYSTEM RELATIONSHIPS
  // ========================================
  
  // Messages sent
  messagesSent Message[] @relation("MessageSender")
  
  // Chat notifications received
  chatNotifications ChatNotification[] @relation("ChatNotificationUser")
  
  // Chat insights targeted to this user
  // chatInsights ChatInsight[]
  
  // Quick access fields
  hasUnreadMessages Boolean @default(false)
  lastActiveAt DateTime?

  // ========================================
  // SECURITY & PRIVACY RELATIONSHIPS
  // ========================================
  
  // User blocking
  blockedUsers     UserBlock[] @relation("UserBlocker")
  blockedBy        UserBlock[] @relation("UserBlocked")
  
  // User flags and violations
  userFlags        UserFlag[] @relation("UserFlagged")
  userViolations   UserViolation[] @relation("UserViolated")
  violationsIssued UserViolation[] @relation("ViolationAdmin")
  
  // Abuse reports
  abuseReportsFiled    AbuseReport[] @relation("AbuseReporter")
  abuseReportsReceived AbuseReport[] @relation("AbuseReported")
  
  // Audit logging
  chatAuditLogs    ChatAuditLog[] @relation("AuditLogUser")
  generalAuditLogs AuditLog[] @relation("GeneralAuditLogUser")

  @@index([role])
  @@index([verified])
  @@index([active])
}

// ========================================
// ROLE-BASED PROFILES WITH REAL RELATIONSHIPS
// ========================================

model CustomerProfile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // ========================================
  // REAL RELATIONSHIP TO USER
  // ========================================
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal Information
  firstName   String
  lastName    String
  dateOfBirth DateTime?
  gender      String?
  nationality String?
  
  // Contact Information
  alternatePhone    String?
  emergencyContact  String?
  emergencyPhone    String?
  
  // Address Information
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  
  // Preferences
  preferredLanguage String @default("en")
  currency          String @default("PKR")
  dietaryRestrictions String[]
  accessibility     String[]
  
  // Travel Preferences
  travelStyle       String? // luxury, budget, adventure, family
  groupSize         Int?
  budgetRange       String?
  
  // Loyalty Program
  loyaltyPoints     Int @default(0)
  membershipTier    String @default("BRONZE") // BRONZE, SILVER, GOLD, PLATINUM
  
  // Statistics (calculated from related bookings)
  totalBookings     Int @default(0)
  totalSpent        Float @default(0)
  averageRating     Float @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([membershipTier])
  @@index([city, country])
}

model PropertyOwner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // ========================================
  // REAL RELATIONSHIP TO USER
  // ========================================
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Business Information
  businessName        String
  businessType        String // individual, company, chain
  businessLicense     String?
  taxId               String?
  
  // Contact Information
  businessPhone       String
  businessEmail       String
  businessAddress     String
  businessCity        String
  businessState       String
  businessCountry     String
  businessPostalCode  String
  
  // Banking Information
  bankName            String?
  accountNumber       String?
  routingNumber       String?
  paypalEmail         String?
  
  // Verification Status
  verified            Boolean @default(false)
  verificationLevel   String @default("BASIC") // BASIC, VERIFIED, PREMIUM
  documentsSubmitted  String[]
  
  // Business Metrics (calculated from related properties and bookings)
  totalProperties     Int @default(0)
  totalBookings       Int @default(0)
  totalRevenue        Float @default(0)
  averageRating       Float @default(0)
  responseRate        Float @default(0)
  responseTime        Int @default(0) // in minutes
  
  // Settings
  instantBooking      Boolean @default(false)
  autoAcceptBookings  Boolean @default(false)
  cancellationPolicy  String @default("MODERATE")
  checkInTime         String @default("15:00")
  checkOutTime        String @default("11:00")
  
  // ========================================
  // REAL RELATIONSHIPS TO PROPERTIES
  // ========================================
  properties          Property[]
  
  // ========================================
  // REAL RELATIONSHIPS TO COMMISSIONS
  // ========================================
  commissions         Commission[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([verified])
  @@index([businessCity, businessCountry])
}

model VehicleOwner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // ========================================
  // REAL RELATIONSHIP TO USER
  // ========================================
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Business Information
  businessName        String
  businessType        String // individual, company, fleet
  businessLicense     String?
  transportLicense    String?
  insuranceProvider   String
  insurancePolicy     String
  insuranceExpiry     DateTime
  
  // Contact Information
  businessPhone       String
  businessEmail       String
  businessAddress     String
  businessCity        String
  businessState       String
  businessCountry     String
  
  // Driver Information
  drivingLicense      String
  licenseExpiry       DateTime
  drivingExperience   Int // years
  languages           String[]
  
  // Banking Information
  bankName            String?
  accountNumber       String?
  routingNumber       String?
  
  // Verification Status
  verified            Boolean @default(false)
  verificationLevel   String @default("BASIC")
  documentsSubmitted  String[]
  backgroundCheck     Boolean @default(false)
  
  // Fleet Information
  totalVehicles       Int @default(0)
  activeVehicles      Int @default(0)
  vehicleTypes        String[]
  
  // Business Metrics (calculated from related vehicles and bookings)
  totalBookings       Int @default(0)
  totalRevenue        Float @default(0)
  averageRating       Float @default(0)
  completionRate      Float @default(0)
  onTimeRate          Float @default(0)
  
  // Service Areas
  serviceAreas        String[]
  maxDistance         Int @default(100) // km
  
  // Settings
  instantBooking      Boolean @default(false)
  airportPickup       Boolean @default(false)
  longDistanceTrips   Boolean @default(false)
  
  // ========================================
  // REAL RELATIONSHIPS TO VEHICLES
  // ========================================
  vehicles            Vehicle[]
  
  // ========================================
  // REAL RELATIONSHIPS TO COMMISSIONS
  // ========================================
  commissions         Commission[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([verified])
  @@index([businessCity, businessCountry])
  @@index([serviceAreas])
}

model TourGuide {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // ========================================
  // REAL RELATIONSHIP TO USER
  // ========================================
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal Information
  firstName           String
  lastName            String
  dateOfBirth         DateTime
  nationality         String
  
  // Professional Information
  guideLicense        String?
  licenseExpiry       DateTime?
  yearsOfExperience   Int
  languages           String[]
  specializations     String[]
  certifications      String[]
  
  // Contact Information
  businessPhone       String?
  businessEmail       String?
  
  // Service Information
  serviceAreas        String[]
  maxGroupSize        Int @default(10)
  minGroupSize        Int @default(1)
  pricePerPerson      Float
  pricePerGroup       Float?
  
  // Availability
  availableDays       String[] // ["MONDAY", "TUESDAY", ...]
  workingHours        String   // "09:00-18:00"
  advanceBooking      Int @default(24) // hours
  
  // Verification Status
  verified            Boolean @default(false)
  verificationLevel   String @default("BASIC")
  documentsSubmitted  String[]
  backgroundCheck     Boolean @default(false)
  
  // Business Metrics (calculated from related tours and bookings)
  totalTours          Int @default(0)
  totalBookings       Int @default(0)
  totalRevenue        Float @default(0)
  averageRating       Float @default(0)
  repeatCustomers     Int @default(0)
  
  // Banking Information
  bankName            String?
  accountNumber       String?
  routingNumber       String?
  
  // ========================================
  // REAL RELATIONSHIPS TO TOURS
  // ========================================
  tours               Tour[]
  
  // ========================================
  // REAL RELATIONSHIPS TO COMMISSIONS
  // ========================================
  commissions         Commission[]
  
  // ========================================
  // REAL RELATIONSHIPS TO BOOKINGS
  // ========================================
  tourBookings        TourBooking[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([verified])
  @@index([serviceAreas])
  @@index([languages])
  @@index([specializations])
}

model SuperAdmin {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // ========================================
  // REAL RELATIONSHIP TO USER
  // ========================================
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Admin Information
  adminLevel          String @default("ADMIN") // ADMIN, SUPER_ADMIN, MODERATOR
  department          String?
  employeeId          String?
  
  // Permissions
  permissions         String[]
  canApproveListings  Boolean @default(false)
  canManageUsers      Boolean @default(false)
  canViewFinancials   Boolean @default(false)
  canManageContent    Boolean @default(false)
  canAccessAnalytics  Boolean @default(false)
  
  // Activity Tracking
  lastActiveAt        DateTime?
  actionsPerformed    Int @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([adminLevel])
}

// ========================================
// SERVICE MODELS WITH REAL RELATIONSHIPS
// ========================================

model Property {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  type          PropertyType
  
  // Location Information
  address       String
  city          String
  state         String?
  country       String
  postalCode    String?
  latitude      Float?
  longitude     Float?
  neighborhood  String?
  landmarks     String[]
  
  // Property Details
  maxGuests     Int
  bedrooms      Int
  bathrooms     Int
  beds          Int?
  area          Float? // in square meters
  floor         Int?
  totalFloors   Int?
  
  // Pricing
  basePrice     Float
  cleaningFee   Float @default(0)
  serviceFee    Float @default(0)
  taxRate       Float @default(0)
  currency      String @default("PKR")
  
  // Pricing Rules
  weekendPricing    Float? // multiplier for weekends
  monthlyDiscount   Float @default(0) // percentage
  weeklyDiscount    Float @default(0) // percentage
  seasonalPricing   Json? // complex pricing rules
  
  // Media
  images        String[]
  videos        String[]
  virtualTour   String?
  floorPlan     String?
  
  // Amenities and Features
  amenities     String[]
  safetyFeatures String[]
  accessibility  String[]
  houseRules     String[]
  
  // Availability
  available     Boolean @default(true)
  instantBook   Boolean @default(false)
  minStay       Int @default(1)
  maxStay       Int @default(365)
  advanceNotice Int @default(0) // hours
  
  // Check-in/out
  checkInTime   String @default("15:00")
  checkOutTime  String @default("11:00")
  selfCheckIn   Boolean @default(false)
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  ownerId       String   @db.ObjectId
  owner         PropertyOwner @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  coHosts       String[] @db.ObjectId
  
  // Approval Status
  approvalStatus ApprovalStatus @default(PENDING)
  approvedBy     String? @db.ObjectId
  approvedAt     DateTime?
  rejectionReason String?
  
  // Statistics (calculated from related bookings and reviews)
  rating        Float   @default(0)
  reviewCount   Int     @default(0)
  totalBookings Int     @default(0)
  viewCount     Int     @default(0)
  favoriteCount Int     @default(0)
  
  // ========================================
  // REAL RELATIONSHIPS TO BOOKINGS & REVIEWS
  // ========================================
  bookings      PropertyBooking[]
  reviews       Review[]
  unavailableDates UnavailableDate[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([city, country])
  @@index([type])
  @@index([basePrice])
  @@index([ownerId])
  @@index([approvalStatus])
  @@index([available])
  @@index([rating])
}

model Vehicle {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  brand           String
  model           String
  year            Int
  type            VehicleType
  category        String // economy, luxury, premium, etc.
  description     String
  
  // Vehicle Specifications
  seats           Int
  doors           Int?
  transmission    String // manual, automatic, CVT
  fuelType        String // petrol, diesel, electric, hybrid
  engineSize      String?
  mileage         Float? // km per liter
  color           String?
  
  // Pricing
  basePrice       Float // per day
  hourlyRate      Float?
  weeklyRate      Float?
  monthlyRate     Float?
  currency        String @default("PKR")
  
  // Additional Costs
  securityDeposit Float @default(0)
  insuranceFee    Float @default(0)
  driverFee       Float @default(0) // if driver included
  fuelPolicy      String @default("FULL_TO_FULL") // FULL_TO_FULL, SAME_TO_SAME
  
  // Media
  images          String[]
  videos          String[]
  documents       String[] // registration, insurance docs
  
  // Features and Equipment
  features        String[]
  safetyFeatures  String[]
  entertainment   String[]
  comfort         String[]
  
  // Location and Service
  location        String
  city            String
  state           String?
  country         String
  latitude        Float?
  longitude       Float?
  serviceRadius   Int @default(50) // km
  
  // Availability
  available       Boolean @default(true)
  instantBook     Boolean @default(false)
  minRentalHours  Int @default(24)
  maxRentalDays   Int @default(30)
  advanceNotice   Int @default(2) // hours
  
  // Vehicle Documentation
  licensePlate    String  @unique
  registrationNo  String
  insurancePolicy String
  insuranceExpiry DateTime
  lastService     DateTime?
  nextService     DateTime?
  
  // Driver Information
  driverIncluded  Boolean @default(false)
  driverRequired  Boolean @default(false)
  driverLanguages String[]
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  ownerId         String   @db.ObjectId
  owner           VehicleOwner @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Approval Status
  approvalStatus  ApprovalStatus @default(PENDING)
  approvedBy      String? @db.ObjectId
  approvedAt      DateTime?
  rejectionReason String?
  
  // Statistics (calculated from related bookings and reviews)
  rating          Float   @default(0)
  reviewCount     Int     @default(0)
  totalBookings   Int     @default(0)
  totalKilometers Float   @default(0)
  viewCount       Int     @default(0)
  favoriteCount   Int     @default(0)
  
  // ========================================
  // REAL RELATIONSHIPS TO BOOKINGS & REVIEWS
  // ========================================
  bookings        VehicleBooking[]
  reviews         Review[]
  unavailableDates UnavailableDate[]
  maintenanceRecords MaintenanceRecord[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([city, country])
  @@index([type])
  @@index([basePrice])
  @@index([ownerId])
  @@index([approvalStatus])
  @@index([available])
  @@index([rating])
}

model Tour {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  type            TourType
  category        String // adventure, cultural, food, etc.
  
  // Tour Details
  duration        Int // in hours
  groupSize       Int
  minGroupSize    Int @default(1)
  maxGroupSize    Int
  difficulty      String // easy, moderate, challenging
  ageRestriction  String? // "18+", "all ages", etc.
  
  // Location Information
  city            String
  state           String?
  country         String
  meetingPoint    String
  endPoint        String?
  latitude        Float?
  longitude       Float?
  
  // Pricing
  pricePerPerson  Float
  pricePerGroup   Float?
  currency        String @default("PKR")
  
  // Inclusions and Exclusions
  inclusions      String[]
  exclusions      String[]
  requirements    String[]
  recommendations String[]
  
  // Media
  images          String[]
  videos          String[]
  itinerary       Json? // detailed day-by-day itinerary
  
  // Availability
  available       Boolean @default(true)
  instantBook     Boolean @default(false)
  advanceBooking  Int @default(24) // hours
  
  // Schedule
  availableDays   String[] // ["MONDAY", "TUESDAY", ...]
  timeSlots       String[] // ["09:00", "14:00", ...]
  seasonalAvailability Json?
  
  // Languages
  languages       String[]
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  guideId         String   @db.ObjectId
  guide           TourGuide @relation(fields: [guideId], references: [id], onDelete: Cascade)
  
  // Approval Status
  approvalStatus  ApprovalStatus @default(PENDING)
  approvedBy      String? @db.ObjectId
  approvedAt      DateTime?
  rejectionReason String?
  
  // Statistics (calculated from related bookings and reviews)
  rating          Float   @default(0)
  reviewCount     Int     @default(0)
  totalBookings   Int     @default(0)
  viewCount       Int     @default(0)
  favoriteCount   Int     @default(0)
  
  // ========================================
  // REAL RELATIONSHIPS TO BOOKINGS & REVIEWS
  // ========================================
  bookings        TourBooking[]
  reviews         Review[]
  unavailableDates UnavailableDate[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([city, country])
  @@index([type])
  @@index([pricePerPerson])
  @@index([guideId])
  @@index([approvalStatus])
  @@index([available])
  @@index([rating])
}

// ========================================
// BOOKING MODELS WITH REAL RELATIONSHIPS
// ========================================

model PropertyBooking {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  bookingNumber   String        @unique
  
  // Booking Details
  checkIn         DateTime
  checkOut        DateTime
  guests          Int
  adults          Int
  children        Int @default(0)
  infants         Int @default(0)
  
  // Pricing Breakdown
  basePrice       Float
  cleaningFee     Float @default(0)
  serviceFee      Float @default(0)
  taxes           Float @default(0)
  discounts       Float @default(0)
  totalPrice      Float
  currency        String @default("PKR")
  
  // Booking Status
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Guest Information
  guestName       String
  guestEmail      String
  guestPhone      String
  specialRequests String?
  
  // Check-in/out Details
  checkInTime     String?
  checkOutTime    String?
  actualCheckIn   DateTime?
  actualCheckOut  DateTime?
  
  // Cancellation
  cancelledAt     DateTime?
  cancellationReason String?
  refundAmount    Float?
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  userId          String @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  propertyId      String @db.ObjectId
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  // Chat integration
  conversationId String? @db.ObjectId
  conversation Conversation? @relation("PropertyBookingConversation", fields: [conversationId], references: [id])
  
  // ========================================
  // REAL RELATIONSHIPS TO PAYMENTS & REVIEWS
  // ========================================
  // Note: Payments and reviews are linked via bookingId and bookingType fields
  // This allows for flexible relationships across different booking types
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([propertyId])
  @@index([status])
  @@index([checkIn, checkOut])
}

model VehicleBooking {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  bookingNumber   String        @unique
  
  // Booking Details
  startDate       DateTime
  endDate         DateTime
  pickupTime      String
  returnTime      String
  
  // Location Details
  pickupLocation  String
  returnLocation  String
  pickupLatitude  Float?
  pickupLongitude Float?
  returnLatitude  Float?
  returnLongitude Float?
  
  // Driver Details
  driverRequired  Boolean @default(false)
  driverIncluded  Boolean @default(false)
  driverName      String?
  driverPhone     String?
  
  // Pricing Breakdown
  basePrice       Float
  driverFee       Float @default(0)
  insuranceFee    Float @default(0)
  securityDeposit Float @default(0)
  extraFees       Float @default(0)
  totalPrice      Float
  currency        String @default("PKR")
  
  // Booking Status
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Renter Information
  renterName      String
  renterEmail     String
  renterPhone     String
  licenseNumber   String
  licenseExpiry   DateTime
  
  // Trip Details
  estimatedKm     Float?
  actualKm        Float?
  fuelLevel       String? // full, half, quarter, empty
  vehicleCondition String?
  
  // Special Requirements
  specialRequests String?
  additionalEquipment String[]
  
  // Cancellation
  cancelledAt     DateTime?
  cancellationReason String?
  refundAmount    Float?
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  userId          String @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  vehicleId       String @db.ObjectId
  vehicle         Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  
  // Chat integration
  conversationId String? @db.ObjectId
  conversation Conversation? @relation("VehicleBookingConversation", fields: [conversationId], references: [id])
  
  // ========================================
  // REAL RELATIONSHIPS TO PAYMENTS & REVIEWS
  // ========================================
  // Note: Payments and reviews are linked via bookingId and bookingType fields
  // This allows for flexible relationships across different booking types
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([vehicleId])
  @@index([status])
  @@index([startDate, endDate])
}

model TourBooking {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  bookingNumber   String        @unique
  
  // Booking Details
  tourDate        DateTime
  timeSlot        String
  participants    Int
  adults          Int
  children        Int @default(0)
  
  // Pricing Breakdown
  pricePerPerson  Float
  childDiscount   Float @default(0)
  groupDiscount   Float @default(0)
  extraFees       Float @default(0)
  totalPrice      Float
  currency        String @default("PKR")
  
  // Booking Status
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Lead Traveler Information
  leadTravelerName String
  leadTravelerEmail String
  leadTravelerPhone String
  
  // Participant Details
  participantNames String[]
  participantAges  Int[]
  dietaryRequirements String[]
  accessibilityNeeds String[]
  
  // Meeting Details
  meetingPoint    String
  meetingTime     String
  actualMeetingTime DateTime?
  
  // Special Requirements
  specialRequests String?
  language        String @default("en")
  
  // Cancellation
  cancelledAt     DateTime?
  cancellationReason String?
  refundAmount    Float?
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  userId          String @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tourId          String @db.ObjectId
  tour            Tour @relation(fields: [tourId], references: [id], onDelete: Cascade)
  
  guideId         String @db.ObjectId
  guide           TourGuide @relation(fields: [guideId], references: [id], onDelete: Cascade)
  
  // Chat integration
  conversationId String? @db.ObjectId
  conversation Conversation? @relation("TourBookingConversation", fields: [conversationId], references: [id])
  
  // ========================================
  // REAL RELATIONSHIPS TO PAYMENTS & REVIEWS
  // ========================================
  // Note: Payments and reviews are linked via bookingId and bookingType fields
  // This allows for flexible relationships across different booking types
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([tourId])
  @@index([guideId])
  @@index([status])
  @@index([tourDate])
}

// ========================================
// PAYMENT SYSTEM WITH REAL RELATIONSHIPS
// ========================================

model Payment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float
  currency        String        @default("PKR")
  method          PaymentMethod
  transactionId   String        @unique
  status          PaymentStatus @default(PENDING)
  
  // Payment Details
  paymentGateway  String? // stripe, paypal, razorpay, etc.
  gatewayResponse Json?
  failureReason   String?
  
  // Refund Information
  refundAmount    Float?
  refundReason    String?
  refundedAt      DateTime?
  
  // Timestamps
  paidAt          DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  userId          String @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Flexible booking reference
  bookingId       String @db.ObjectId
  bookingType     String // "property", "vehicle", "tour"

  @@index([status])
  @@index([userId])
  @@index([bookingId, bookingType])
}

// ========================================
// COMMISSION SYSTEM WITH REAL RELATIONSHIPS
// ========================================

model Commission {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float
  percentage      Float
  currency        String @default("PKR")
  status          CommissionStatus @default(PENDING)
  
  // Commission Details
  bookingId       String @db.ObjectId
  bookingType     String // "property", "vehicle", "tour"
  serviceId       String @db.ObjectId
  serviceType     String // "property", "vehicle", "tour"
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  userId          String @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Provider relationships (one of these will be set based on service type)
  propertyOwnerId String? @db.ObjectId
  propertyOwner   PropertyOwner? @relation(fields: [propertyOwnerId], references: [id], onDelete: Cascade)
  
  vehicleOwnerId  String? @db.ObjectId
  vehicleOwner    VehicleOwner? @relation(fields: [vehicleOwnerId], references: [id], onDelete: Cascade)
  
  tourGuideId     String? @db.ObjectId
  tourGuide       TourGuide? @relation(fields: [tourGuideId], references: [id], onDelete: Cascade)
  
  // Payout tracking
  payoutId        String? @db.ObjectId
  payout          Payout? @relation(fields: [payoutId], references: [id])
  
  // Dates
  calculatedAt    DateTime @default(now())
  paidAt          DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([bookingId, bookingType])
  @@index([status])
  @@index([calculatedAt])
}

model Payout {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float
  currency        String @default("PKR")
  status          PaymentStatus @default(PENDING)
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  userId          String @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Provider relationships
  propertyOwnerId String? @db.ObjectId
  vehicleOwnerId  String? @db.ObjectId
  tourGuideId     String? @db.ObjectId
  
  // Commission tracking
  commissions     Commission[]
  
  // Payout details
  paymentMethod   PaymentMethod
  bankDetails     Json?
  transactionId   String?
  
  // Dates
  requestedAt     DateTime @default(now())
  processedAt     DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([requestedAt])
}

// ========================================
// REVIEW SYSTEM WITH REAL RELATIONSHIPS
// ========================================

model Review {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  rating          Int      // 1-5 stars
  title           String?
  comment         String
  
  // Review Categories (1-5 rating for each)
  cleanlinessRating    Int?
  accuracyRating       Int?
  communicationRating  Int?
  locationRating       Int?
  valueRating          Int?
  serviceRating        Int?
  
  // Review Details
  pros            String[]
  cons            String[]
  images          String[]
  verified        Boolean @default(false)
  helpful         Int @default(0) // helpful votes
  
  // Reviewer Information
  userId          String   @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  reviewerName    String
  reviewerAvatar  String?
  stayDuration    Int? // for properties (nights)
  tripType        String? // business, leisure, family, etc.
  
  // ========================================
  // REAL RELATIONSHIPS TO BOOKINGS
  // ========================================
  bookingId       String   @db.ObjectId
  bookingType     String   // "property", "vehicle", "tour"
  
  // ========================================
  // REAL RELATIONSHIPS TO SERVICES
  // ========================================
  serviceId       String   @db.ObjectId
  serviceType     String   // "property", "vehicle", "tour"
  
  // Service relationships (one of these will be set)
  property        Property? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  vehicle         Vehicle? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  tour            Tour? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  // Response from Owner/Provider
  ownerResponse   String?
  ownerResponseAt DateTime?
  
  // Moderation
  flagged         Boolean @default(false)
  flagReason      String?
  moderatedBy     String? @db.ObjectId
  moderatedAt     DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([rating])
  @@index([serviceId, serviceType])
  @@index([verified])
  @@index([createdAt])
}

// ========================================
// NOTIFICATION SYSTEM WITH REAL RELATIONSHIPS
// ========================================

model Notification {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  type            NotificationType
  title           String
  message         String
  
  // Notification Details
  data            Json?    // additional data for the notification
  actionUrl       String?  // URL to navigate to when clicked
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  userId          String   @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  userRole        UserRole
  
  // Status
  read            Boolean @default(false)
  readAt          DateTime?
  
  // Delivery
  emailSent       Boolean @default(false)
  smsSent         Boolean @default(false)
  pushSent        Boolean @default(false)
  
  // Priority
  priority        String @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([read])
  @@index([type])
  @@index([createdAt])
}

// ========================================
// WISHLIST SYSTEM WITH REAL RELATIONSHIPS
// ========================================

model Wishlist {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String   @default("My Favorites")
  description     String?
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  userId          String   @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Wishlist Items
  propertyIds     String[] @db.ObjectId
  vehicleIds      String[] @db.ObjectId
  tourIds         String[] @db.ObjectId
  
  // Settings
  public          Boolean @default(false)
  shared          Boolean @default(false)
  sharedWith      String[] @db.ObjectId
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([public])
}

// ========================================
// UNAVAILABLE DATES WITH REAL RELATIONSHIPS
// ========================================

model UnavailableDate {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate       DateTime
  endDate         DateTime
  reason          String?
  type            String   // "maintenance", "personal", "booked", "blocked"
  
  // ========================================
  // REAL RELATIONSHIPS TO SERVICES
  // ========================================
  serviceId       String   @db.ObjectId
  serviceType     String   // "property", "vehicle", "tour"
  
  // Service relationships (one of these will be set)
  property        Property? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  vehicle         Vehicle? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  tour            Tour? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  // Owner Information
  ownerId         String   @db.ObjectId
  
  // Recurring Pattern
  recurring       Boolean @default(false)
  recurringPattern Json?   // for complex recurring patterns
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([serviceId, serviceType])
  @@index([startDate, endDate])
  @@index([ownerId])
}

// Legacy direct Message model removed in favor of comprehensive chat models

// ========================================
// MAINTENANCE SYSTEM WITH REAL RELATIONSHIPS
// ========================================

model MaintenanceRecord {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  vehicleId       String   @db.ObjectId
  vehicle         Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  
  // Maintenance Details
  type            String   // "routine", "repair", "inspection"
  description     String
  cost            Float
  currency        String @default("PKR")
  
  // Service Provider
  serviceProvider String
  serviceLocation String
  
  // Dates
  scheduledDate   DateTime
  completedDate   DateTime?
  nextServiceDue  DateTime?
  
  // Documentation
  invoiceUrl      String?
  images          String[]
  notes           String?
  
  // Mileage
  mileageAtService Float?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([vehicleId])
  @@index([scheduledDate])
  @@index([type])
}

// ========================================
// DOCUMENT SYSTEM WITH REAL RELATIONSHIPS
// ========================================

model Document {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  type            DocumentType
  name            String
  originalName    String
  url             String
  size            Int
  mimeType        String
  
  // Document Details
  documentNumber  String?
  expiryDate      DateTime?
  issueDate       DateTime?
  issuingAuthority String?
  
  // Verification Status
  verified        Boolean @default(false)
  verifiedBy      String? @db.ObjectId
  verifiedAt      DateTime?
  rejectionReason String?
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  userId          String @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  userRole        UserRole
  
  // Related Entity
  relatedId       String? @db.ObjectId
  relatedType     String? // "property", "vehicle", "tour", "profile"
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([type])
  @@index([verified])
  @@index([relatedId, relatedType])
}

// ========================================
// ANALYTICS SYSTEM WITH REAL RELATIONSHIPS
// ========================================

model Analytics {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  type            String   // "booking", "view", "search", "conversion"
  entity          String   // "property", "vehicle", "tour"
  entityId        String   @db.ObjectId
  
  // Metrics Data
  value           Float?
  count           Int @default(1)
  metadata        Json?
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  userId          String? @db.ObjectId
  user            User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  userRole        UserRole?
  sessionId       String?
  
  // Location Context
  city            String?
  country         String?
  ipAddress       String?
  
  // Time Context
  date            DateTime @default(now())
  hour            Int
  dayOfWeek       Int
  month           Int
  year            Int
  
  createdAt       DateTime @default(now())

  @@index([type, entity])
  @@index([entityId])
  @@index([date])
  @@index([userId])
}

// ========================================
// COUPON SYSTEM
// ========================================

model Coupon {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  code            String   @unique
  name            String
  description     String?
  
  // Discount Details
  type            String   // "percentage", "fixed", "free_shipping"
  value           Float    // percentage or fixed amount
  maxDiscount     Float?   // maximum discount for percentage coupons
  minOrderValue   Float?   // minimum order value to apply
  
  // Validity
  validFrom       DateTime
  validUntil      DateTime
  usageLimit      Int?     // total usage limit
  usageCount      Int @default(0)
  userLimit       Int @default(1) // per user limit
  
  // Applicability
  serviceTypes    String[] // ["property", "vehicle", "tour"]
  userRoles       UserRole[]
  cities          String[]
  
  // Status
  active          Boolean @default(true)
  
  // Creator
  createdBy       String @db.ObjectId
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([active])
  @@index([validFrom, validUntil])
}

// ========================================
// PASSWORD RESET SYSTEM
// ========================================

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

// ========================================
// SUPPORT SYSTEM MODELS
// ========================================

model SupportTicket {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  ticketNumber    String   @unique
  title           String
  description     String
  category        SupportTicketCategory
  priority        SupportTicketPriority @default(NORMAL)
  status          SupportTicketStatus @default(NEW)
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  providerId      String   @db.ObjectId
  provider        User     @relation("SupportTicketProvider", fields: [providerId], references: [id], onDelete: Cascade)
  
  assignedToId    String?  @db.ObjectId
  assignedTo      User?    @relation("SupportTicketAssigned", fields: [assignedToId], references: [id])
  
  // Related entities
  relatedServiceId String? @db.ObjectId
  relatedServiceType String? // "property", "vehicle", "tour"
  
  // Escalation
  escalated       Boolean @default(false)
  escalatedAt     DateTime?
  escalatedBy     String? @db.ObjectId
  
  // Resolution
  resolvedAt      DateTime?
  resolvedBy      String? @db.ObjectId
  resolution      String?
  satisfactionRating Int?
  
  // Internal notes (admin only)
  internalNotes   String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastMessageAt   DateTime @default(now())
  
  // ========================================
  // REAL RELATIONSHIPS TO MESSAGES
  // ========================================
  messages        SupportMessage[] @relation("SupportTicketMessages")
  
  @@index([providerId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([category])
  @@index([createdAt])
}

model SupportMessage {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  type            MessageType @default(TEXT)
  
  // File attachments
  attachments     String[]
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  ticketId        String   @db.ObjectId
  ticket          SupportTicket @relation("SupportTicketMessages", fields: [ticketId], references: [id], onDelete: Cascade)
  
  senderId        String   @db.ObjectId
  sender          User     @relation("SupportMessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  
  // Message metadata
  isRead          Boolean @default(false)
  readAt          DateTime?
  
  // Template reference (if using template)
  templateId      String? @db.ObjectId
  template        ResponseTemplate? @relation(fields: [templateId], references: [id])
  
  // System message data
  systemData      Json?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([ticketId])
  @@index([senderId])
  @@index([createdAt])

  // Opposite relation for AbuseReport.message
  abuseReports    AbuseReport[] @relation("AbuseReportMessage")
}

model ResponseTemplate {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  title            String
  content           String
  category          SupportTicketCategory
  
  // Template metadata
  isActive         Boolean @default(true)
  usageCount       Int @default(0)
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  createdById      String   @db.ObjectId
  createdBy        User     @relation("TemplateCreator", fields: [createdById], references: [id], onDelete: Cascade)
  
  // Usage tracking
  messages         SupportMessage[]
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([category])
  @@index([isActive])
  @@index([createdById])
}

model SupportBroadcast {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  message         String
  category        String?
  
  // Target audience
  targetRoles     UserRole[]
  targetProviders String[] @db.ObjectId // Specific provider IDs
  
  // Broadcast settings
  isActive        Boolean @default(true)
  scheduledAt     DateTime?
  expiresAt       DateTime?
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  createdById     String   @db.ObjectId
  createdBy       User     @relation("BroadcastCreator", fields: [createdById], references: [id], onDelete: Cascade)
  
  // Delivery tracking
  deliveredTo     String[] @db.ObjectId
  readBy          String[] @db.ObjectId
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([isActive])
  @@index([scheduledAt])
  @@index([createdById])
}

model SupportAnalytics {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Metrics
  date            DateTime @default(now())
  totalTickets    Int @default(0)
  resolvedTickets Int @default(0)
  avgResponseTime Int @default(0) // in minutes
  avgResolutionTime Int @default(0) // in minutes
  
  // By category
  ticketsByCategory Json
  
  // By priority
  ticketsByPriority Json
  
  // Satisfaction
  avgSatisfaction Float @default(0)
  totalRatings    Int @default(0)
  
  // Volume trends
  ticketsCreated  Int @default(0)
  messagesSent    Int @default(0)
  
  createdAt       DateTime @default(now())

  @@index([date])
}

// ========================================
// SECURITY & PRIVACY MODELS
// ========================================

model UserBlock {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  blockerId       String   @db.ObjectId
  blockedUserId   String   @db.ObjectId
  reason          String?
  blockedAt       DateTime @default(now())
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  blocker         User     @relation("UserBlocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockedUser     User     @relation("UserBlocked", fields: [blockedUserId], references: [id], onDelete: Cascade)
  
  @@index([blockerId])
  @@index([blockedUserId])
  @@unique([blockerId, blockedUserId])
}

model UserFlag {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  flagType        String   // "spam", "profanity", "suspicious", "multiple_reports"
  reason          String
  severity        String   @default("medium") // "low", "medium", "high", "critical"
  autoGenerated   Boolean  @default(false)
  
  // Dismissal
  dismissed       Boolean  @default(false)
  dismissReason   String?
  dismissedBy     String?  @db.ObjectId
  dismissedAt     DateTime?
  
  createdAt       DateTime @default(now())
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  user            User     @relation("UserFlagged", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([flagType])
  @@index([severity])
  @@index([createdAt])
}

model UserViolation {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  violationType   String   // "warning", "suspension", "ban"
  reason          String
  severity        String   @default("medium") // "low", "medium", "high", "critical"
  status          String   @default("active") // "active", "expired", "revoked"
  
  // Duration (in hours, null for permanent)
  duration        Int?
  expiresAt       DateTime?
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  user            User     @relation("UserViolated", fields: [userId], references: [id], onDelete: Cascade)
  adminId         String   @db.ObjectId
  admin           User     @relation("ViolationAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId])
  @@index([violationType])
  @@index([status])
  @@index([createdAt])
}

model AbuseReport {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  reporterId      String   @db.ObjectId
  reportedUserId  String   @db.ObjectId
  messageId       String?  @db.ObjectId
  conversationId  String?  @db.ObjectId
  reason          String   // "spam", "harassment", "inappropriate", "scam", "other"
  description     String
  status          String   @default("pending") // "pending", "reviewed", "resolved", "dismissed"
  
  // Admin handling
  adminNotes      String?
  handledBy       String?  @db.ObjectId
  handledAt       DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  reporter        User     @relation("AbuseReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reportedUser    User     @relation("AbuseReported", fields: [reportedUserId], references: [id], onDelete: Cascade)
  message         SupportMessage? @relation("AbuseReportMessage", fields: [messageId], references: [id], onDelete: Cascade)
  // conversation relation removed; keep conversationId scalar
  
  @@index([reporterId])
  @@index([reportedUserId])
  @@index([status])
  @@index([reason])
  @@index([createdAt])
}

model ChatAuditLog {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  action          String   // "message_sent", "message_received", "user_blocked", etc.
  conversationId  String?  @db.ObjectId
  messageId       String?  @db.ObjectId
  targetUserId    String?  @db.ObjectId
  details         Json?
  
  // Security metadata
  ipAddress       String?
  userAgent       String?
  severity        String   @default("low") // "low", "medium", "high", "critical"
  hash            String   // For integrity verification
  
  timestamp       DateTime @default(now())
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  user            User     @relation("AuditLogUser", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([action])
  @@index([severity])
  @@index([timestamp])
}

model AuditLog {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  action          String
  resourceType    String
  resourceId      String
  details         Json?
  
  // Security metadata
  ipAddress       String?
  userAgent       String?
  severity        String   @default("low") // "low", "medium", "high", "critical"
  hash            String   // For integrity verification
  
  timestamp       DateTime @default(now())
  
  // ========================================
  // REAL RELATIONSHIPS
  // ========================================
  user            User     @relation("GeneralAuditLogUser", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([action])
  @@index([resourceType])
  @@index([severity])
  @@index([timestamp])
}

// ========================================
// CHAT ANALYTICS MODELS
// ========================================

// Legacy ChatAnalytics removed; using consolidated analytics models below

model PlatformAnalytics {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  
  date            DateTime @default(now())
  
  // Platform-wide metrics
  totalMessages   Int @default(0)
  activeConversations Int @default(0)
  avgResponseTime Int @default(0) // in minutes
  responseRate    Float @default(0) // percentage
  conversionRate  Float @default(0) // percentage
  customerSatisfaction Float @default(0)
  
  // Peak usage
  peakUsageTimes  Int[] // Array of peak hours
  messageVolumeTrend Json // Daily message volume data
  
  // Response time by role
  responseTimeByRole Json // {role: timeInMinutes}
  
  // Support ticket metrics
  supportTicketMetrics Json
  
  // User engagement
  userEngagement  Json
  
  // Conversion metrics
  conversionMetrics Json
  
  // Quality metrics
  qualityMetrics  Json
  
  createdAt       DateTime @default(now())

  @@index([date])
}

model PerformanceScore {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  
  providerId      String   @db.ObjectId
  provider        User     @relation("PerformanceScoreProvider", fields: [providerId], references: [id], onDelete: Cascade)
  
  // Overall score (0-100)
  overallScore    Int @default(0)
  
  // Breakdown scores
  responseTimeScore Int @default(0)
  responseRateScore Int @default(0)
  customerSatisfactionScore Int @default(0)
  conversionRateScore Int @default(0)
  messageQualityScore Int @default(0)
  
  // Additional metrics
  totalBookings   Int @default(0)
  totalRevenue    Float @default(0)
  customerRating  Float @default(0)
  
  // Ranking
  rank            Int @default(0)
  percentile      Float @default(0)
  
  // Historical data
  previousScore   Int?
  scoreChange     Int @default(0) // positive = improvement
  
  // Performance category
  category        String @default("FAIR") // EXCELLENT, GOOD, FAIR, POOR
  
  // Calculation period
  periodStart     DateTime
  periodEnd       DateTime
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([providerId])
  @@index([overallScore])
  @@index([rank])
  @@index([category])
  @@index([periodStart, periodEnd])
}

model RealTimeActivity {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  
  timestamp       DateTime @default(now())
  
  // Current activity
  activeConversations Int @default(0)
  onlineUsers     Int @default(0)
  messagesInLast5Min Int @default(0)
  
  // System health
  websocketConnections Int @default(0)
  messageQueueSize Int @default(0)
  systemLoad      Float @default(0)
  
  // Support metrics
  awaitingResponse Int @default(0)
  recentEscalations Int @default(0)
  
  // Activity data
  recentMessages  Json // Array of recent message data
  activeUsers     Json // Array of active user data
  
  createdAt       DateTime @default(now())

  @@index([timestamp])
}

// Legacy ChatMessage removed; using comprehensive Message model below
/*
model ChatMessage {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  
  content         String
  type            MessageType @default(TEXT)
  
  // Message metadata
  isRead          Boolean @default(false)
  readAt          DateTime?
  isFlagged       Boolean @default(false)
  flaggedAt       DateTime?
  flaggedBy       String? @db.ObjectId
  flagReason      String?
  
  // Sender and conversation
  senderId        String   @db.ObjectId
  sender          User     @relation("ChatMessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  
  conversationId  String   @db.ObjectId
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  
  // Attachments
  attachments     String[]
  
  // AI analysis
  sentimentScore  Float?
  professionalTone Float?
  qualityScore    Float?
  
  // System data
  systemData      Json?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([senderId])
  @@index([conversationId])
  @@index([createdAt])
  @@index([isRead])
  @@index([isFlagged])
}
*/

// Legacy Conversation model removed; using comprehensive chat Conversation below

// ========================================
// COMPREHENSIVE CHAT SYSTEM MODELS
// ========================================

enum ConversationType {
  CUSTOMER_PROVIDER
  PROVIDER_ADMIN
  CUSTOMER_ADMIN
  GROUP_CHAT
  SUPPORT_TICKET
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
  NOTIFICATION
  REPLY
}

model Conversation {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Participants
  participants    String[] @db.ObjectId // Array of user IDs in conversation
  participantRoles String[] // Array of roles corresponding to participants
  
  // Conversation metadata
  type            ConversationType
  title           String? // Optional conversation title
  description     String? // Optional conversation description
  
  // Related entities
  relatedBookingId String? @db.ObjectId
  relatedBookingType String? // "property", "vehicle", "tour"
  relatedServiceId String? @db.ObjectId
  relatedServiceType String? // "property", "vehicle", "tour"
  
  // Conversation state
  isActive        Boolean @default(true)
  isArchived      Boolean @default(false)
  isPinned        Boolean @default(false)
  // Soft-hide per user
  hiddenBy        String[] @db.ObjectId
  
  // Message tracking
  lastMessageId   String? @db.ObjectId
  lastMessageAt   DateTime @default(now())
  messageCount    Int @default(0)
  
  // Unread tracking
  unreadCount     Json // {userId: count} for each participant
  lastReadAt      Json // {userId: timestamp} for each participant
  
  // Analytics
  responseTime    Int? // Average response time in minutes
  customerSatisfaction Float?
  qualityScore    Float?
  
  // Messages
  messages        Message[] @relation("ConversationMessages")
  
  // Notifications
  notifications   ChatNotification[]
  
  // Booking relationships
  propertyBookings PropertyBooking[] @relation("PropertyBookingConversation")
  vehicleBookings VehicleBooking[] @relation("VehicleBookingConversation")
  tourBookings TourBooking[] @relation("TourBookingConversation")
  
  // Indexes for performance
  @@index([participants])
  @@index([type])
  @@index([isActive])
  @@index([lastMessageAt])
  @@index([relatedBookingId])
  @@index([relatedServiceId])
  @@index([participants, lastMessageAt])
  @@index([participants, isActive])
  @@index([hiddenBy])
}

model Message {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Message content
  content         String
  type            MessageType @default(TEXT)
  
  // Sender information
  senderId        String   @db.ObjectId
  sender          User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderRole      UserRole
  
  // Conversation
  conversationId  String   @db.ObjectId
  conversation    Conversation @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)
  
  // Message threading
  replyToId       String? @db.ObjectId
  replyTo         Message? @relation("MessageReply", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies         Message[] @relation("MessageReply")
  
  // Attachments
  attachments     Json[] // Array of {url, name, type, size}
  
  // Read status
  isRead          Boolean @default(false)
  readBy          String[] @db.ObjectId // Array of user IDs who read it
  readAt          Json // {userId: timestamp}
  
  // Edit tracking
  isEdited        Boolean @default(false)
  editedAt        DateTime?
  editHistory     Json[] // Array of {content, editedAt}
  
  // Message metadata
  isDeleted       Boolean @default(false)
  deletedAt       DateTime?
  deletedBy       String? @db.ObjectId
  
  // AI analysis
  sentimentScore  Float?
  professionalTone Float?
  qualityScore    Float?
  language        String?
  
  // System data
  systemData      Json?
  
  // Notifications
  notifications   ChatNotification[]
  
  // Indexes for performance
  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
  @@index([isRead])
  @@index([conversationId, createdAt])
  @@index([senderId, createdAt])
  @@index([type])
  @@index([isDeleted])
}

model ChatNotification {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  
  // Recipient
  userId          String   @db.ObjectId
  user            User     @relation("ChatNotificationUser", fields: [userId], references: [id], onDelete: Cascade)
  
  // Related entities
  conversationId  String   @db.ObjectId
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  messageId       String   @db.ObjectId
  message         Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  // Notification content
  title           String
  body            String
  type            String @default("message") // "message", "mention", "system"
  
  // Read status
  isRead          Boolean @default(false)
  readAt          DateTime?
  
  // Delivery status
  isDelivered     Boolean @default(false)
  deliveredAt     DateTime?
  
  // Notification metadata
  priority        String @default("normal") // "low", "normal", "high", "urgent"
  category        String? // "booking", "support", "general"
  
  // Indexes for performance
  @@index([userId])
  @@index([isRead])
  @@index([conversationId])
  @@index([createdAt])
  @@index([userId, isRead])
  @@index([userId, createdAt])
}

// ========================================
// CHAT SYSTEM ENUMS
// ========================================

enum ChatStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  BLOCKED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

// ========================================
// CHAT ANALYTICS MODELS
// ========================================

model ChatAnalytics {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Time period
  date            DateTime @default(now())
  period          String @default("daily") // "hourly", "daily", "weekly", "monthly"
  
  // Conversation metrics
  totalConversations Int @default(0)
  activeConversations Int @default(0)
  newConversations Int @default(0)
  closedConversations Int @default(0)
  
  // Message metrics
  totalMessages   Int @default(0)
  messagesSent    Int @default(0)
  messagesReceived Int @default(0)
  averageMessagesPerConversation Float @default(0)
  
  // Response time metrics
  averageResponseTime Int @default(0) // in minutes
  firstResponseTime Int @default(0) // in minutes
  responseRate    Float @default(0) // percentage
  
  // User engagement
  activeUsers     Int @default(0)
  newUsers        Int @default(0)
  returningUsers  Int @default(0)
  
  // Quality metrics
  averageQualityScore Float @default(0)
  flaggedMessages Int @default(0)
  deletedMessages Int @default(0)
  
  // Platform-specific metrics
  platformId      String? @db.ObjectId
  serviceType     String? // "property", "vehicle", "tour"
  
  createdAt       DateTime @default(now())

  @@index([date])
  @@index([period])
  @@index([platformId])
  @@index([serviceType])
  @@index([date, period])
}

model ChatInsight {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  
  // Insight metadata
  type            String // "improvement", "achievement", "trend", "recommendation", "warning"
  priority        String // "low", "medium", "high", "critical"
  category        String // "response_time", "conversion", "quality", "engagement"
  
  // Target
  targetType      String // "provider", "customer", "admin", "platform"
  targetId        String? @db.ObjectId
  
  // Insight content
  title           String
  description     String
  action          String
  impact          String
  
  // Data
  data            Json?
  metrics         Json?
  
  // Status
  isRead          Boolean @default(false)
  isActioned      Boolean @default(false)
  actionedAt      DateTime?
  actionedBy      String? @db.ObjectId
  
  // Expiry
  expiresAt       DateTime?
  isExpired       Boolean @default(false)

  @@index([targetType])
  @@index([targetId])
  @@index([type])
  @@index([priority])
  @@index([isRead])
  @@index([createdAt])
  @@index([expiresAt])
}
